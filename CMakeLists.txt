cmake_minimum_required(VERSION 3.16)
project(lpp_interpreter)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)

include(${CMAKE_SOURCE_DIR}/build/conanbuildinfo.cmake)
conan_basic_setup(TARGETS)

set(SANITIZERS FALSE CACHE BOOL "build with asan and ubsan")
if(SANITIZERS)
    if(MSVC)
        set(ASAN_UBSAN /fsanitize=address)
    else()
        set(ASAN_UBSAN -fsanitize=undefined,address -fno-omit-frame-pointer)
    endif()
endif()

if(MSVC)
    set(CPP_FLAGS /W4 /permissive- ${ASAN_UBSAN})
else()
    set(CPP_FLAGS ${ASAN_UBSAN} -Wall -Wextra -Wconversion -Wpedantic)
    set(CPP_LINKING_OPTS -fno-omit-frame-pointer -fsanitize=undefined,address)
endif()

set(HEADERS PRIVATE token.h PRIVATE lexer.h PRIVATE ast.h PRIVATE parser.h PRIVATE evaluator.h PRIVATE object.h PRIVATE builtin.h PRIVATE utils.h PRIVATE cleaner.h)

add_executable(${PROJECT_NAME} main.cpp repl.cpp parser.cpp lexer.cpp)
target_link_libraries(${PROJECT_NAME} PRIVATE CONAN_PKG::fmt)
target_precompile_headers(${PROJECT_NAME} ${HEADERS})
target_compile_options(${PROJECT_NAME} PRIVATE ${CPP_FLAGS})
if(NOT MSVC AND SANITIZERS)
    target_link_options(${PROJECT_NAME} PRIVATE ${CPP_LINKING_OPTS})
endif()

if("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
    enable_testing()
    add_subdirectory(tests)
endif()

if(MSVC)
    add_compile_options("$<$<CONFIG:DEBUG>:/DEBUG;/Od>")
    add_compile_options("$<$<CONFIG:RELEASE>:/O2>")
else()
    add_compile_options("$<$<CONFIG:DEBUG>:-O0;-g3;-ggdb>")
    add_compile_options("$<$<CONFIG:RELEASE>:-O3>")
endif()
